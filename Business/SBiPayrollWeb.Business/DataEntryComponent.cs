//====================================================================================================
// Base code generated with Motion: BC Gen (Build 2.2.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 06/19/2014 12:51:10 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using SBiPayrollWeb.Entities;
using SBiPayrollWeb.Data;


namespace SBiPayrollWeb.Business
{
    /// <summary>
    /// DataEntries business component.
    /// </summary>
    public partial class DataEntryComponent
    {
        public List<PayeeRate> GetAllPayeeRates()
        {
            List<PayeeRate> result = default(List<PayeeRate>);

            // Data access component declarations.
            PayeeRateDAC payeeRateDAC = new PayeeRateDAC();

            // Step 1 - Calling Select on PayeeRateDAC.
            result = payeeRateDAC.Select();
            return result;

        }

        public List<NHIFRate> GetAllNhifRates()
        {
            List<NHIFRate> result = default(List<NHIFRate>);

            // Data access component declarations.
            NHIFRateDAC nHIFRateDAC = new NHIFRateDAC();

            // Step 1 - Calling Select on NHIFRateDAC.
            result = nHIFRateDAC.Select();
            return result;

        }

        public List<spAllowedReportsRolesMenus> GetAllReports()
        {
            List<spAllowedReportsRolesMenus> result = default(List<spAllowedReportsRolesMenus>);

            // Data access component declarations.
            spAllowedReportsRolesMenusDAC spAllowedReportsRolesMenusDAC = new spAllowedReportsRolesMenusDAC();

            // Step 1 - Calling Select on spAllowedReportsRolesMenusDAC.
            result = spAllowedReportsRolesMenusDAC.Select();
            return result;

        }

        public List<TaxTracking> GetAllTaxCalculator()
        {
            List<TaxTracking> result = default(List<TaxTracking>);

            // Data access component declarations.
            TaxTrackingDAC TaxTrackingDAC = new TaxTrackingDAC();

            // Step 1 - Calling Select on TaxTrackingDAC.
            result = TaxTrackingDAC.Select();
            return result;

        }
        #region "Employees"
        public List<Employee> GetAllEmployees()
        {
            List<Employee> result = default(List<Employee>);

            // Data access component declarations.
            EmployeeDAC _EmployeeDAC = new EmployeeDAC();

            result = _EmployeeDAC.Select();
            return result;

        }
        public Employee GetEmployeebyEmail(string email)
        {
            Employee result = default(Employee);

            // Data access component declarations.
            EmployeeDAC _EmployeeDAC = new EmployeeDAC();

            result = _EmployeeDAC.SelectByEmail(email);
            return result;
        }
        public Employee CreateEmployee(Employee model)
        {
            EmployeeDAC _EmployeeDAC = new EmployeeDAC();

            Employee _Employee = new Employee();
            _Employee.Email = model.Email;
            _Employee.Surname = model.Surname;
            _Employee.OtherNames = model.OtherNames;
            _Employee.EmpNo = model.EmpNo;
            _Employee.MaritalStatus = model.MaritalStatus;
            _Employee.Gender = model.Gender;
            _Employee.Photo = model.Photo;
            _Employee.DoB = model.DoB;
            _Employee.DoE = model.DoE;
            _Employee.CreatedOn = model.CreatedOn;
            _Employee.DateLeft = model.DateLeft;
            _Employee.TelephoneNo = model.TelephoneNo;
            _Employee.DepartmentId = model.DepartmentId;
            _Employee.EmployerId = model.EmployerId;
            _Employee.BasicComputation = model.BasicComputation;
            _Employee.BasicPay = model.BasicPay;
            _Employee.LeaveBalance = model.LeaveBalance;
            _Employee.PersonalRelief = model.PersonalRelief;
            _Employee.MortgageRelief = model.MortgageRelief;
            _Employee.InsuranceRelief = model.InsuranceRelief;
            _Employee.NSSFNo = model.NSSFNo;
            _Employee.NHIFNo = model.NHIFNo;
            _Employee.IDNo = model.IDNo;
            _Employee.PINNo = model.PINNo;
            _Employee.PayPoint = model.PayPoint;
            _Employee.EmpGroup = model.EmpGroup;
            _Employee.EmpPayroll = model.EmpPayroll;
            _Employee.PaymentMode = model.PaymentMode;
            _Employee.ChequeNo = model.ChequeNo;
            _Employee.BankCode = model.BankCode;
            _Employee.BankAccount = model.BankAccount;
            _Employee.CreatedBy = model.CreatedBy;
            _Employee.PrevEmployer = model.PrevEmployer;
            _Employee.IsActive = model.IsActive;
            _Employee.IsDeleted = model.IsDeleted;

            Employee EmployeeReturned = _EmployeeDAC.Create(_Employee);

            AddDefaultEmpTransactions(EmployeeReturned.Id, EmployeeReturned.EmpNo, EmployeeReturned.BasicPay, EmployeeReturned.CreatedBy);

            return EmployeeReturned;
        }
        public void DeleteEmployeeById(int Id)
        {
            EmployeeDAC _EmployeeDAC = new EmployeeDAC();
            _EmployeeDAC.DeleteById(Id);
        }
        public Employee GetEmployeebyId(int Id)
        {
            Employee result = default(Employee);

            // Data access component declarations.
            EmployeeDAC _EmployeeDAC = new EmployeeDAC();

            result = _EmployeeDAC.SelectById(Id);
            return result;

        }
        public void UpdateEmployee(Employee _Employee)
        {
            // Data access component declarations.
            EmployeeDAC _EmployeeDAC = new EmployeeDAC();

            _EmployeeDAC.UpdateById(_Employee);
        }
        public void UploadEmployeePhoto(Employee _Employee)
        {
            // Data access component declarations.
            EmployeeDAC _EmployeeDAC = new EmployeeDAC();

            _EmployeeDAC.UploadEmployeePhoto(_Employee);
        }
        #endregion "Employees"
        #region "Employers"
        public List<Employer> GetAllEmployers()
        {
            List<Employer> result = default(List<Employer>);

            // Data access component declarations.
            EmployerDAC _EmployerDAC = new EmployerDAC();

            result = _EmployerDAC.Select();
            return result;

        }
        public Employer CreateEmployer(Employer model)
        {
            EmployerDAC _EmployerDAC = new EmployerDAC();

            Employer _Employer = new Employer();
            _Employer.Name = model.Name;
            _Employer.Email = model.Email;
            _Employer.Telephone = model.Telephone;
            _Employer.Address1 = model.Address1;
            _Employer.Address2 = model.Address2;
            _Employer.Slogan = model.Slogan;
            _Employer.AuthorizedSignatory = model.AuthorizedSignatory;
            _Employer.PIN = model.PIN;
            _Employer.NHIF = model.NHIF;
            _Employer.NSSF = model.NSSF;
            _Employer.BankBranchSortCode = model.BankBranchSortCode;
            _Employer.AccountName = model.AccountName;
            _Employer.AccountNo = model.AccountNo;
            _Employer.Logo = model.Logo;
            _Employer.IsActive = model.IsActive;
            _Employer.IsDeleted = model.IsDeleted;
            _Employer.IsDefault = model.IsDefault;

            Employer EmployerReturned = _EmployerDAC.Create(_Employer);

            return EmployerReturned;
        }
        public void DeleteEmployerById(int Id)
        {
            EmployerDAC _EmployerDAC = new EmployerDAC();
            _EmployerDAC.DeleteById(Id);
        }
        public Employer GetEmployerbyId(int Id)
        {
            Employer result = default(Employer);

            // Data access component declarations.
            EmployerDAC _EmployerDAC = new EmployerDAC();

            result = _EmployerDAC.SelectById(Id);
            return result;

        }
        public Employer GetDefaultEmployer()
        {
            Employer result = default(Employer);

            // Data access component declarations.
            EmployerDAC _EmployerDAC = new EmployerDAC();

            result = _EmployerDAC.SelectDefaultEmployer();
            return result;

        }
        public void UpdateEmployer(Employer _Employer)
        {
            // Data access component declarations.
            EmployerDAC _EmployerDAC = new EmployerDAC();

            _EmployerDAC.UpdateById(_Employer);
        }
        public void UploadEmployerLogo(Employer _Employer)
        {
            // Data access component declarations.
            EmployerDAC _EmployerDAC = new EmployerDAC();

            _EmployerDAC.UploadEmployerLogo(_Employer);
        }
        #endregion "Employers"

        #region "EmployeeTransactions"
        public string SettingLookup(string Key)
        {
            SettingDAC setDac = new SettingDAC();
            var setting = setDac.SelectById(Key);
            if (setting != null)
                return setting.SSValue;
            else
                return null;
        }
        public void AddDefaultEmpTransactions(int employeeid, string EmpNo, decimal BasicPay, string _User)
        {
            //Add PAYE, NSSF, NHIF
            CreateEmpTxn(employeeid, DateTime.Today,
                EmpNo,
                "PAYE",
                0,
                true,
                true,
                false,
                true,
                _User,
                "System",
                DateTime.Today,
                "System",
                DateTime.Today, true, 0, "");

            CreateEmpTxn(employeeid, DateTime.Today,
                EmpNo,
                "NSSF",
                0,
                true,
                true,
                false,
                true,
                _User,
                "System",
                DateTime.Today,
                "System",
                DateTime.Today, true, 0, "");
            CreateEmpTxn(employeeid, DateTime.Today,
                EmpNo,
                "NHIF",
                0,
                true,
                true,
                false,
                true,
                _User,
                "System",
                DateTime.Today,
                "System",
                DateTime.Today, true, 0, "");
            CreateEmpTxn(employeeid, DateTime.Today, EmpNo,
                "BASIC",
                BasicPay,
                true,
                true,
                false,
                false,
                _User,
                "System",
                DateTime.Today,
                "System",
                DateTime.Today, true, 0, "");
            //add pension if flag = 1 or 3
            string pensionSchemeFlag = SettingLookup("DEFCONTRSCHEME");
            //if ("1".Equals(pensionSchemeFlag) || "3".Equals(pensionSchemeFlag))
            if (!string.IsNullOrEmpty(pensionSchemeFlag))
            {
                CreateEmpTxn(employeeid, DateTime.Today, EmpNo,
                "PENSION",
                0,
                true,
                true,
                false,
                false,
                _User,
                "System",
                DateTime.Today,
                "System",
                DateTime.Today, true, 0, "");
            }
        }

        public void CreateEmpTxn(int employeeid, DateTime pdate,
            string empno, string payrollItemId, decimal amt, bool recur, bool enable,
            bool processed, bool track, string user, string modifiedby, DateTime modifieddate,
            string auth, DateTime authDate, bool show, decimal ytdAmt, string loantype)
        {
            EmployeeTransactionDAC edac = new EmployeeTransactionDAC();
            EmployeeTransaction et = new EmployeeTransaction();
            et.EmployeeId = employeeid;
            et.Amount = amt;
            et.PostDate = pdate;
            et.EmpNo = empno;
            et.ItemId = payrollItemId;
            et.Recurrent = recur;
            et.Processed = processed;
            et.Enabled = enable;
            et.TrackYTD = track;
            et.CreatedBy = user;
            et.LastChangeDate = modifieddate;
            et.LastChangedBy = modifiedby;
            et.AuthorizedBy = auth;
            et.AuthorizeDate = authDate;
            et.Balance = ytdAmt;
            et.ShowYTDInPayslip = show;

            edac.Create(et);
        }

        #endregion "EmployeeTransactions"





    }
}