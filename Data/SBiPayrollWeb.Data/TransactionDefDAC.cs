//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:33:56 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiPayrollWeb.Entities;

namespace SBiPayrollWeb.Data
{
    /// <summary>
    /// TransactionDef data access component. Manages CRUD operations for the TransactionDef table.
    /// </summary>
    public partial class TransactionDefDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the TransactionDef table.
        /// </summary>
        /// <param name="transactionDef">A TransactionDef object.</param>
        /// <returns>An updated TransactionDef object.</returns>
        public TransactionDef Create(TransactionDef transactionDef)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.TransactionDef ([TxnCode], [DataEntry], [PayrollItem], [DefaultAmount], [Enabled], [Recurrent], [TrackYTD]) " +
                "VALUES(@TxnCode, @DataEntry, @PayrollItem, @DefaultAmount, @Enabled, @Recurrent, @TrackYTD);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TxnCode", DbType.StringFixedLength, transactionDef.TxnCode);
                db.AddInParameter(cmd, "@DataEntry", DbType.StringFixedLength, transactionDef.DataEntry);
                db.AddInParameter(cmd, "@PayrollItem", DbType.StringFixedLength, transactionDef.PayrollItem);
                db.AddInParameter(cmd, "@DefaultAmount", DbType.Currency, transactionDef.DefaultAmount);
                db.AddInParameter(cmd, "@Enabled", DbType.Boolean, transactionDef.Enabled);
                db.AddInParameter(cmd, "@Recurrent", DbType.Boolean, transactionDef.Recurrent);
                db.AddInParameter(cmd, "@TrackYTD", DbType.Boolean, transactionDef.TrackYTD);

                db.ExecuteNonQuery(cmd);
            }

            return transactionDef;
        }

        /// <summary>
        /// Updates an existing row in the TransactionDef table.
        /// </summary>
        /// <param name="transactionDef">A TransactionDef entity object.</param>
        public void UpdateById(TransactionDef transactionDef)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.TransactionDef " +
                "SET " +
                    "[DataEntry]=@DataEntry, " +
                    "[PayrollItem]=@PayrollItem, " +
                    "[DefaultAmount]=@DefaultAmount, " +
                    "[Enabled]=@Enabled, " +
                    "[Recurrent]=@Recurrent, " +
                    "[TrackYTD]=@TrackYTD " +
                "WHERE [TxnCode]=@TxnCode ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@DataEntry", DbType.StringFixedLength, transactionDef.DataEntry);
                db.AddInParameter(cmd, "@PayrollItem", DbType.StringFixedLength, transactionDef.PayrollItem);
                db.AddInParameter(cmd, "@DefaultAmount", DbType.Currency, transactionDef.DefaultAmount);
                db.AddInParameter(cmd, "@Enabled", DbType.Boolean, transactionDef.Enabled);
                db.AddInParameter(cmd, "@Recurrent", DbType.Boolean, transactionDef.Recurrent);
                db.AddInParameter(cmd, "@TrackYTD", DbType.Boolean, transactionDef.TrackYTD);
                db.AddInParameter(cmd, "@TxnCode", DbType.StringFixedLength, transactionDef.TxnCode);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the TransactionDef table.
        /// </summary>
        /// <param name="txnCode">A txnCode value.</param>
        public void DeleteById(string txnCode)
        {
            const string SQL_STATEMENT = "DELETE dbo.TransactionDef " +
                                         "WHERE [TxnCode]=@TxnCode ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TxnCode", DbType.StringFixedLength, txnCode);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the TransactionDef table.
        /// </summary>
        /// <param name="txnCode">A TxnCode value.</param>
        /// <returns>A TransactionDef object with data populated from the database.</returns>
        public TransactionDef SelectById(string txnCode)
        {
            const string SQL_STATEMENT =
                "SELECT [TxnCode], [DataEntry], [PayrollItem], [DefaultAmount], [Enabled], [Recurrent], [TrackYTD]" +
                        " " +
                "FROM dbo.TransactionDef  " +
                "WHERE [TxnCode]=@TxnCode ";

            TransactionDef transactionDef = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@TxnCode", DbType.StringFixedLength, txnCode);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new TransactionDef
                        transactionDef = new TransactionDef();

                        // Read values.
                        transactionDef.TxnCode = base.GetDataValue<string>(dr, "TxnCode");
                        transactionDef.DataEntry = Convert.ToChar(base.GetDataValue<string>(dr, "DataEntry"));
                        transactionDef.PayrollItem = base.GetDataValue<string>(dr, "PayrollItem");
                        transactionDef.DefaultAmount = base.GetDataValue<decimal>(dr, "DefaultAmount");
                        transactionDef.Enabled = base.GetDataValue<bool>(dr, "Enabled");
                        transactionDef.Recurrent = base.GetDataValue<bool>(dr, "Recurrent");
                        transactionDef.TrackYTD = base.GetDataValue<bool>(dr, "TrackYTD");
                    }
                }
            }

            return transactionDef;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the TransactionDef table.
        /// </summary>
        /// <returns>A collection of TransactionDef objects.</returns>		
        public List<TransactionDef> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [TxnCode], [DataEntry], [PayrollItem], [DefaultAmount], [Enabled], [Recurrent], [TrackYTD]" +
                        " " +
                "FROM dbo.TransactionDef ";

            List<TransactionDef> result = new List<TransactionDef>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new TransactionDef
                        TransactionDef transactionDef = new TransactionDef();

                        // Read values.
                        transactionDef.TxnCode = base.GetDataValue<string>(dr, "TxnCode");
                        transactionDef.DataEntry = Convert.ToChar(base.GetDataValue<string>(dr, "DataEntry"));
                        transactionDef.PayrollItem = base.GetDataValue<string>(dr, "PayrollItem");
                        transactionDef.DefaultAmount = base.GetDataValue<decimal>(dr, "DefaultAmount");
                        transactionDef.Enabled = base.GetDataValue<bool>(dr, "Enabled");
                        transactionDef.Recurrent = base.GetDataValue<bool>(dr, "Recurrent");
                        transactionDef.TrackYTD = base.GetDataValue<bool>(dr, "TrackYTD");

                        // Add to List.
                        result.Add(transactionDef);
                    }
                }
            }

            return result;
        }
    }
}

