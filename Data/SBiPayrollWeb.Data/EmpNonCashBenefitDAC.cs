//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:33:56 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiPayrollWeb.Entities;

namespace SBiPayrollWeb.Data
{
    /// <summary>
    /// EmpNonCashBenefits data access component. Manages CRUD operations for the EmpNonCashBenefits table.
    /// </summary>
    public partial class EmpNonCashBenefitDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the EmpNonCashBenefits table.
        /// </summary>
        /// <param name="empNonCashBenefit">A EmpNonCashBenefit object.</param>
        /// <returns>An updated EmpNonCashBenefit object.</returns>
        public EmpNonCashBenefit Create(EmpNonCashBenefit empNonCashBenefit)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.EmpNonCashBenefits ([EmployeeId], [EmpNo], [BenefitId], [Quantity], [Rate]) " +
                "VALUES(@EmployeeId, @EmpNo, @BenefitId, @Quantity, @Rate);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@EmployeeId", DbType.Int32, empNonCashBenefit.EmployeeId);
                db.AddInParameter(cmd, "@EmpNo", DbType.StringFixedLength, empNonCashBenefit.EmpNo);
                db.AddInParameter(cmd, "@BenefitId", DbType.Int32, empNonCashBenefit.BenefitId);
                db.AddInParameter(cmd, "@Quantity", DbType.Int32, empNonCashBenefit.Quantity);
                db.AddInParameter(cmd, "@Rate", DbType.Currency, empNonCashBenefit.Rate);

                db.ExecuteNonQuery(cmd);
            }

            return empNonCashBenefit;
        }

        /// <summary>
        /// Updates an existing row in the EmpNonCashBenefits table.
        /// </summary>
        /// <param name="empNonCashBenefit">A EmpNonCashBenefit entity object.</param>
        public void UpdateById(EmpNonCashBenefit empNonCashBenefit)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.EmpNonCashBenefits " +
                "SET " +
                    "[EmployeeId]=@EmployeeId, " +
                    "[Quantity]=@Quantity, " +
                    "[Rate]=@Rate " +
                "WHERE [EmpNo]=@EmpNo " +
                      "AND [BenefitId]=@BenefitId ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@EmployeeId", DbType.Int32, empNonCashBenefit.EmployeeId);
                db.AddInParameter(cmd, "@Quantity", DbType.Int32, empNonCashBenefit.Quantity);
                db.AddInParameter(cmd, "@Rate", DbType.Currency, empNonCashBenefit.Rate);
                db.AddInParameter(cmd, "@EmpNo", DbType.StringFixedLength, empNonCashBenefit.EmpNo);
                db.AddInParameter(cmd, "@BenefitId", DbType.Int32, empNonCashBenefit.BenefitId);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the EmpNonCashBenefits table.
        /// </summary>
        /// <param name="empNo">A empNo value.</param>
        public void DeleteById(string empNo)
        {
            const string SQL_STATEMENT = "DELETE dbo.EmpNonCashBenefits " +
                                         "WHERE [EmpNo]=@EmpNo ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@EmpNo", DbType.StringFixedLength, empNo);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the EmpNonCashBenefits table.
        /// </summary>
        /// <param name="empNo">A EmpNo value.</param>
        /// <param name="benefitId">A BenefitId value.</param>
        /// <returns>A EmpNonCashBenefit object with data populated from the database.</returns>
        public EmpNonCashBenefit SelectById(string empNo, int benefitId)
        {
            const string SQL_STATEMENT =
                "SELECT [EmployeeId], [EmpNo], [BenefitId], [Quantity], [Rate] " +
                "FROM dbo.EmpNonCashBenefits  " +
                "WHERE [EmpNo]=@EmpNo " +
                      "AND [BenefitId]=@BenefitId ";

            EmpNonCashBenefit empNonCashBenefit = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@EmpNo", DbType.StringFixedLength, empNo);
                db.AddInParameter(cmd, "@BenefitId", DbType.Int32, benefitId);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new EmpNonCashBenefit
                        empNonCashBenefit = new EmpNonCashBenefit();

                        // Read values.
                        empNonCashBenefit.EmployeeId = base.GetDataValue<int>(dr, "EmployeeId");
                        empNonCashBenefit.EmpNo = base.GetDataValue<string>(dr, "EmpNo");
                        empNonCashBenefit.BenefitId = base.GetDataValue<int>(dr, "BenefitId");
                        empNonCashBenefit.Quantity = base.GetDataValue<int>(dr, "Quantity");
                        empNonCashBenefit.Rate = base.GetDataValue<decimal>(dr, "Rate");
                    }
                }
            }

            return empNonCashBenefit;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the EmpNonCashBenefits table.
        /// </summary>
        /// <returns>A collection of EmpNonCashBenefit objects.</returns>		
        public List<EmpNonCashBenefit> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [EmployeeId], [EmpNo], [BenefitId], [Quantity], [Rate] " +
                "FROM dbo.EmpNonCashBenefits ";

            List<EmpNonCashBenefit> result = new List<EmpNonCashBenefit>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new EmpNonCashBenefit
                        EmpNonCashBenefit empNonCashBenefit = new EmpNonCashBenefit();

                        // Read values.
                        empNonCashBenefit.EmployeeId = base.GetDataValue<int>(dr, "EmployeeId");
                        empNonCashBenefit.EmpNo = base.GetDataValue<string>(dr, "EmpNo");
                        empNonCashBenefit.BenefitId = base.GetDataValue<int>(dr, "BenefitId");
                        empNonCashBenefit.Quantity = base.GetDataValue<int>(dr, "Quantity");
                        empNonCashBenefit.Rate = base.GetDataValue<decimal>(dr, "Rate");

                        // Add to List.
                        result.Add(empNonCashBenefit);
                    }
                }
            }

            return result;
        }
    }
}

