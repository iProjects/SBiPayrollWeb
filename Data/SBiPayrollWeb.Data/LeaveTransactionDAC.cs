//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:33:56 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiPayrollWeb.Entities;

namespace SBiPayrollWeb.Data
{
    /// <summary>
    /// LeaveTransactions data access component. Manages CRUD operations for the LeaveTransactions table.
    /// </summary>
    public partial class LeaveTransactionDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the LeaveTransactions table.
        /// </summary>
        /// <param name="leaveTransaction">A LeaveTransaction object.</param>
        /// <returns>An updated LeaveTransaction object.</returns>
        public LeaveTransaction Create(LeaveTransaction leaveTransaction)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.LeaveTransactions ([Id], [PostDate], [EffectiveDate], [LeaveDesc], [NoofDays]) " +
                "VALUES(@Id, @PostDate, @EffectiveDate, @LeaveDesc, @NoofDays);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, leaveTransaction.Id);
                db.AddInParameter(cmd, "@PostDate", DbType.Date, leaveTransaction.PostDate);
                db.AddInParameter(cmd, "@EffectiveDate", DbType.Date, leaveTransaction.EffectiveDate);
                db.AddInParameter(cmd, "@LeaveDesc", DbType.String, leaveTransaction.LeaveDesc);
                db.AddInParameter(cmd, "@NoofDays", DbType.Int32, leaveTransaction.NoofDays);

                db.ExecuteNonQuery(cmd);
            }

            return leaveTransaction;
        }

        /// <summary>
        /// Updates an existing row in the LeaveTransactions table.
        /// </summary>
        /// <param name="leaveTransaction">A LeaveTransaction entity object.</param>
        public void UpdateById(LeaveTransaction leaveTransaction)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.LeaveTransactions " +
                "SET " +
                    "[PostDate]=@PostDate, " +
                    "[EffectiveDate]=@EffectiveDate, " +
                    "[LeaveDesc]=@LeaveDesc, " +
                    "[NoofDays]=@NoofDays " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@PostDate", DbType.Date, leaveTransaction.PostDate);
                db.AddInParameter(cmd, "@EffectiveDate", DbType.Date, leaveTransaction.EffectiveDate);
                db.AddInParameter(cmd, "@LeaveDesc", DbType.String, leaveTransaction.LeaveDesc);
                db.AddInParameter(cmd, "@NoofDays", DbType.Int32, leaveTransaction.NoofDays);
                db.AddInParameter(cmd, "@Id", DbType.Int32, leaveTransaction.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the LeaveTransactions table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.LeaveTransactions " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the LeaveTransactions table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A LeaveTransaction object with data populated from the database.</returns>
        public LeaveTransaction SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [PostDate], [EffectiveDate], [LeaveDesc], [NoofDays] " +
                "FROM dbo.LeaveTransactions  " +
                "WHERE [Id]=@Id ";

            LeaveTransaction leaveTransaction = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new LeaveTransaction
                        leaveTransaction = new LeaveTransaction();

                        // Read values.
                        leaveTransaction.Id = base.GetDataValue<int>(dr, "Id");
                        leaveTransaction.PostDate = base.GetDataValue<DateTime>(dr, "PostDate");
                        leaveTransaction.EffectiveDate = base.GetDataValue<DateTime>(dr, "EffectiveDate");
                        leaveTransaction.LeaveDesc = base.GetDataValue<string>(dr, "LeaveDesc");
                        leaveTransaction.NoofDays = base.GetDataValue<int>(dr, "NoofDays");
                    }
                }
            }

            return leaveTransaction;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the LeaveTransactions table.
        /// </summary>
        /// <returns>A collection of LeaveTransaction objects.</returns>		
        public List<LeaveTransaction> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [PostDate], [EffectiveDate], [LeaveDesc], [NoofDays] " +
                "FROM dbo.LeaveTransactions ";

            List<LeaveTransaction> result = new List<LeaveTransaction>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new LeaveTransaction
                        LeaveTransaction leaveTransaction = new LeaveTransaction();

                        // Read values.
                        leaveTransaction.Id = base.GetDataValue<int>(dr, "Id");
                        leaveTransaction.PostDate = base.GetDataValue<DateTime>(dr, "PostDate");
                        leaveTransaction.EffectiveDate = base.GetDataValue<DateTime>(dr, "EffectiveDate");
                        leaveTransaction.LeaveDesc = base.GetDataValue<string>(dr, "LeaveDesc");
                        leaveTransaction.NoofDays = base.GetDataValue<int>(dr, "NoofDays");

                        // Add to List.
                        result.Add(leaveTransaction);
                    }
                }
            }

            return result;
        }
    }
}

