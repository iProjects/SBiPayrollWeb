//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:33:56 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiPayrollWeb.Entities;

namespace SBiPayrollWeb.Data
{
    /// <summary>
    /// EmployerBanks data access component. Manages CRUD operations for the EmployerBanks table.
    /// </summary>
    public partial class EmployerBankDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the EmployerBanks table.
        /// </summary>
        /// <param name="employerBank">A EmployerBank object.</param>
        /// <returns>An updated EmployerBank object.</returns>
        public EmployerBank Create(EmployerBank employerBank)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.EmployerBanks ([EmployerId], [BankSortCode], [AccountName], [AccountNo], [Signatory], [IsDefault]) " +
                "VALUES(@EmployerId, @BankSortCode, @AccountName, @AccountNo, @Signatory, @IsDefault); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@EmployerId", DbType.Int32, employerBank.EmployerId);
                db.AddInParameter(cmd, "@BankSortCode", DbType.String, employerBank.BankSortCode);
                db.AddInParameter(cmd, "@AccountName", DbType.String, employerBank.AccountName);
                db.AddInParameter(cmd, "@AccountNo", DbType.String, employerBank.AccountNo);
                db.AddInParameter(cmd, "@Signatory", DbType.String, employerBank.Signatory);
                db.AddInParameter(cmd, "@IsDefault", DbType.Boolean, employerBank.IsDefault);

                // Get the primary key value.
                employerBank.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return employerBank;
        }

        /// <summary>
        /// Updates an existing row in the EmployerBanks table.
        /// </summary>
        /// <param name="employerBank">A EmployerBank entity object.</param>
        public void UpdateById(EmployerBank employerBank)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.EmployerBanks " +
                "SET " +
                    "[EmployerId]=@EmployerId, " +
                    "[BankSortCode]=@BankSortCode, " +
                    "[AccountName]=@AccountName, " +
                    "[AccountNo]=@AccountNo, " +
                    "[Signatory]=@Signatory, " +
                    "[IsDefault]=@IsDefault " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@EmployerId", DbType.Int32, employerBank.EmployerId);
                db.AddInParameter(cmd, "@BankSortCode", DbType.String, employerBank.BankSortCode);
                db.AddInParameter(cmd, "@AccountName", DbType.String, employerBank.AccountName);
                db.AddInParameter(cmd, "@AccountNo", DbType.String, employerBank.AccountNo);
                db.AddInParameter(cmd, "@Signatory", DbType.String, employerBank.Signatory);
                db.AddInParameter(cmd, "@IsDefault", DbType.Boolean, employerBank.IsDefault);
                db.AddInParameter(cmd, "@Id", DbType.Int32, employerBank.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the EmployerBanks table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.EmployerBanks " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the EmployerBanks table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A EmployerBank object with data populated from the database.</returns>
        public EmployerBank SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [EmployerId], [BankSortCode], [AccountName], [AccountNo], [Signatory], [IsDefault]" +
                        " " +
                "FROM dbo.EmployerBanks  " +
                "WHERE [Id]=@Id ";

            EmployerBank employerBank = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new EmployerBank
                        employerBank = new EmployerBank();

                        // Read values.
                        employerBank.Id = base.GetDataValue<int>(dr, "Id");
                        employerBank.EmployerId = base.GetDataValue<int>(dr, "EmployerId");
                        employerBank.BankSortCode = base.GetDataValue<string>(dr, "BankSortCode");
                        employerBank.AccountName = base.GetDataValue<string>(dr, "AccountName");
                        employerBank.AccountNo = base.GetDataValue<string>(dr, "AccountNo");
                        employerBank.Signatory = base.GetDataValue<string>(dr, "Signatory");
                        employerBank.IsDefault = base.GetDataValue<bool>(dr, "IsDefault");
                    }
                }
            }

            return employerBank;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the EmployerBanks table.
        /// </summary>
        /// <returns>A collection of EmployerBank objects.</returns>		
        public List<EmployerBank> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [EmployerId], [BankSortCode], [AccountName], [AccountNo], [Signatory], [IsDefault]" +
                        " " +
                "FROM dbo.EmployerBanks ";

            List<EmployerBank> result = new List<EmployerBank>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new EmployerBank
                        EmployerBank employerBank = new EmployerBank();

                        // Read values.
                        employerBank.Id = base.GetDataValue<int>(dr, "Id");
                        employerBank.EmployerId = base.GetDataValue<int>(dr, "EmployerId");
                        employerBank.BankSortCode = base.GetDataValue<string>(dr, "BankSortCode");
                        employerBank.AccountName = base.GetDataValue<string>(dr, "AccountName");
                        employerBank.AccountNo = base.GetDataValue<string>(dr, "AccountNo");
                        employerBank.Signatory = base.GetDataValue<string>(dr, "Signatory");
                        employerBank.IsDefault = base.GetDataValue<bool>(dr, "IsDefault");

                        // Add to List.
                        result.Add(employerBank);
                    }
                }
            }

            return result;
        }
    }
}

