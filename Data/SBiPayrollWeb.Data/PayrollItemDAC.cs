//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:33:56 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiPayrollWeb.Entities;

namespace SBiPayrollWeb.Data
{
    /// <summary>
    /// PayrollItems data access component. Manages CRUD operations for the PayrollItems table.
    /// </summary>
    public partial class PayrollItemDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the PayrollItems table.
        /// </summary>
        /// <param name="payrollItem">A PayrollItem object.</param>
        /// <returns>An updated PayrollItem object.</returns>
        public PayrollItem Create(PayrollItem payrollItem)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.PayrollItems ([Id], [Description], [ItemTypeId], [TaxTrackingId], [PayableTo], [GLAccount], [ReFField], [DefaultItem], [AddToPension], [Active], [Enable], [IsDeleted]) " +
                "VALUES(@Id, @Description, @ItemTypeId, @TaxTrackingId, @PayableTo, @GLAccount, @ReFField, @DefaultItem, @AddToPension, @Active, @Enable, @IsDeleted);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.String, payrollItem.Id);
                db.AddInParameter(cmd, "@Description", DbType.String, payrollItem.Description);
                db.AddInParameter(cmd, "@ItemTypeId", DbType.String, payrollItem.ItemTypeId);
                db.AddInParameter(cmd, "@TaxTrackingId", DbType.String, payrollItem.TaxTrackingId);
                db.AddInParameter(cmd, "@PayableTo", DbType.String, payrollItem.PayableTo);
                db.AddInParameter(cmd, "@GLAccount", DbType.String, payrollItem.GLAccount);
                db.AddInParameter(cmd, "@ReFField", DbType.Int32, payrollItem.ReFField);
                db.AddInParameter(cmd, "@DefaultItem", DbType.Boolean, payrollItem.DefaultItem);
                db.AddInParameter(cmd, "@AddToPension", DbType.Boolean, payrollItem.AddToPension);
                db.AddInParameter(cmd, "@Active", DbType.Boolean, payrollItem.Active);
                db.AddInParameter(cmd, "@Enable", DbType.Boolean, payrollItem.Enable);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, payrollItem.IsDeleted);

                db.ExecuteNonQuery(cmd);
            }

            return payrollItem;
        }

        /// <summary>
        /// Updates an existing row in the PayrollItems table.
        /// </summary>
        /// <param name="payrollItem">A PayrollItem entity object.</param>
        public void UpdateById(PayrollItem payrollItem)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.PayrollItems " +
                "SET " +
                    "[Description]=@Description, " +
                    "[ItemTypeId]=@ItemTypeId, " +
                    "[TaxTrackingId]=@TaxTrackingId, " +
                    "[PayableTo]=@PayableTo, " +
                    "[GLAccount]=@GLAccount, " +
                    "[ReFField]=@ReFField, " +
                    "[DefaultItem]=@DefaultItem, " +
                    "[AddToPension]=@AddToPension, " +
                    "[Active]=@Active, " +
                    "[Enable]=@Enable, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Description", DbType.String, payrollItem.Description);
                db.AddInParameter(cmd, "@ItemTypeId", DbType.String, payrollItem.ItemTypeId);
                db.AddInParameter(cmd, "@TaxTrackingId", DbType.String, payrollItem.TaxTrackingId);
                db.AddInParameter(cmd, "@PayableTo", DbType.String, payrollItem.PayableTo);
                db.AddInParameter(cmd, "@GLAccount", DbType.String, payrollItem.GLAccount);
                db.AddInParameter(cmd, "@ReFField", DbType.Int32, payrollItem.ReFField);
                db.AddInParameter(cmd, "@DefaultItem", DbType.Boolean, payrollItem.DefaultItem);
                db.AddInParameter(cmd, "@AddToPension", DbType.Boolean, payrollItem.AddToPension);
                db.AddInParameter(cmd, "@Active", DbType.Boolean, payrollItem.Active);
                db.AddInParameter(cmd, "@Enable", DbType.Boolean, payrollItem.Enable);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, payrollItem.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.String, payrollItem.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the PayrollItems table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(string id)
        {
            const string SQL_STATEMENT = "DELETE dbo.PayrollItems " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.String, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the PayrollItems table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A PayrollItem object with data populated from the database.</returns>
        public PayrollItem SelectById(string id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [Description], [ItemTypeId], [TaxTrackingId], [PayableTo], [GLAccount], [ReFField]" +
                        ", [DefaultItem], [AddToPension], [Active], [Enable], [IsDeleted] " +
                "FROM dbo.PayrollItems  " +
                "WHERE [Id]=@Id ";

            PayrollItem payrollItem = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.String, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new PayrollItem
                        payrollItem = new PayrollItem();

                        // Read values.
                        payrollItem.Id = base.GetDataValue<string>(dr, "Id");
                        payrollItem.Description = base.GetDataValue<string>(dr, "Description");
                        payrollItem.ItemTypeId = base.GetDataValue<string>(dr, "ItemTypeId");
                        payrollItem.TaxTrackingId = base.GetDataValue<string>(dr, "TaxTrackingId");
                        payrollItem.PayableTo = base.GetDataValue<string>(dr, "PayableTo");
                        payrollItem.GLAccount = base.GetDataValue<string>(dr, "GLAccount");
                        payrollItem.ReFField = base.GetDataValue<int>(dr, "ReFField");
                        payrollItem.DefaultItem = base.GetDataValue<bool>(dr, "DefaultItem");
                        payrollItem.AddToPension = base.GetDataValue<bool>(dr, "AddToPension");
                        payrollItem.Active = base.GetDataValue<bool>(dr, "Active");
                        payrollItem.Enable = base.GetDataValue<bool>(dr, "Enable");
                        payrollItem.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return payrollItem;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the PayrollItems table.
        /// </summary>
        /// <returns>A collection of PayrollItem objects.</returns>		
        public List<PayrollItem> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [Description], [ItemTypeId], [TaxTrackingId], [PayableTo], [GLAccount], [ReFField]" +
                        ", [DefaultItem], [AddToPension], [Active], [Enable], [IsDeleted] " +
                "FROM dbo.PayrollItems ";

            List<PayrollItem> result = new List<PayrollItem>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new PayrollItem
                        PayrollItem payrollItem = new PayrollItem();

                        // Read values.
                        payrollItem.Id = base.GetDataValue<string>(dr, "Id");
                        payrollItem.Description = base.GetDataValue<string>(dr, "Description");
                        payrollItem.ItemTypeId = base.GetDataValue<string>(dr, "ItemTypeId");
                        payrollItem.TaxTrackingId = base.GetDataValue<string>(dr, "TaxTrackingId");
                        payrollItem.PayableTo = base.GetDataValue<string>(dr, "PayableTo");
                        payrollItem.GLAccount = base.GetDataValue<string>(dr, "GLAccount");
                        payrollItem.ReFField = base.GetDataValue<int>(dr, "ReFField");
                        payrollItem.DefaultItem = base.GetDataValue<bool>(dr, "DefaultItem");
                        payrollItem.AddToPension = base.GetDataValue<bool>(dr, "AddToPension");
                        payrollItem.Active = base.GetDataValue<bool>(dr, "Active");
                        payrollItem.Enable = base.GetDataValue<bool>(dr, "Enable");
                        payrollItem.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(payrollItem);
                    }
                }
            }

            return result;
        }
    }
}

