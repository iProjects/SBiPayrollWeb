//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:33:56 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiPayrollWeb.Entities;

namespace SBiPayrollWeb.Data
{
    /// <summary>
    /// PayslipDet_Temp data access component. Manages CRUD operations for the PayslipDet_Temp table.
    /// </summary>
    public partial class PayslipDet_TempDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the PayslipDet_Temp table.
        /// </summary>
        /// <param name="payslipDet_Temp">A PayslipDet_Temp object.</param>
        /// <returns>An updated PayslipDet_Temp object.</returns>
        public PayslipDet_Temp Create(PayslipDet_Temp payslipDet_Temp)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.PayslipDet_Temp ([EmpNo], [EmployeeId], [EmpTxnId], [Period], [Year], [Description], [TaxTracking], [Amount], [DEType], [IsStatutory], [ShowInPayslip], [YTD]) " +
                "VALUES(@EmpNo, @EmployeeId, @EmpTxnId, @Period, @Year, @Description, @TaxTracking, @Amount, @DEType, @IsStatutory, @ShowInPayslip, @YTD); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@EmpNo", DbType.String, payslipDet_Temp.EmpNo);
                db.AddInParameter(cmd, "@EmployeeId", DbType.Int32, payslipDet_Temp.EmployeeId);
                db.AddInParameter(cmd, "@EmpTxnId", DbType.Int32, payslipDet_Temp.EmpTxnId);
                db.AddInParameter(cmd, "@Period", DbType.Int32, payslipDet_Temp.Period);
                db.AddInParameter(cmd, "@Year", DbType.Int32, payslipDet_Temp.Year);
                db.AddInParameter(cmd, "@Description", DbType.String, payslipDet_Temp.Description);
                db.AddInParameter(cmd, "@TaxTracking", DbType.StringFixedLength, payslipDet_Temp.TaxTracking);
                db.AddInParameter(cmd, "@Amount", DbType.Decimal, payslipDet_Temp.Amount);
                db.AddInParameter(cmd, "@DEType", DbType.String, payslipDet_Temp.DEType);
                db.AddInParameter(cmd, "@IsStatutory", DbType.Boolean, payslipDet_Temp.IsStatutory);
                db.AddInParameter(cmd, "@ShowInPayslip", DbType.Boolean, payslipDet_Temp.ShowInPayslip);
                db.AddInParameter(cmd, "@YTD", DbType.Decimal, payslipDet_Temp.YTD);

                // Get the primary key value.
                payslipDet_Temp.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return payslipDet_Temp;
        }

        /// <summary>
        /// Updates an existing row in the PayslipDet_Temp table.
        /// </summary>
        /// <param name="payslipDet_Temp">A PayslipDet_Temp entity object.</param>
        public void UpdateById(PayslipDet_Temp payslipDet_Temp)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.PayslipDet_Temp " +
                "SET " +
                    "[EmpNo]=@EmpNo, " +
                    "[EmployeeId]=@EmployeeId, " +
                    "[EmpTxnId]=@EmpTxnId, " +
                    "[Period]=@Period, " +
                    "[Year]=@Year, " +
                    "[Description]=@Description, " +
                    "[TaxTracking]=@TaxTracking, " +
                    "[Amount]=@Amount, " +
                    "[DEType]=@DEType, " +
                    "[IsStatutory]=@IsStatutory, " +
                    "[ShowInPayslip]=@ShowInPayslip, " +
                    "[YTD]=@YTD " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@EmpNo", DbType.String, payslipDet_Temp.EmpNo);
                db.AddInParameter(cmd, "@EmployeeId", DbType.Int32, payslipDet_Temp.EmployeeId);
                db.AddInParameter(cmd, "@EmpTxnId", DbType.Int32, payslipDet_Temp.EmpTxnId);
                db.AddInParameter(cmd, "@Period", DbType.Int32, payslipDet_Temp.Period);
                db.AddInParameter(cmd, "@Year", DbType.Int32, payslipDet_Temp.Year);
                db.AddInParameter(cmd, "@Description", DbType.String, payslipDet_Temp.Description);
                db.AddInParameter(cmd, "@TaxTracking", DbType.StringFixedLength, payslipDet_Temp.TaxTracking);
                db.AddInParameter(cmd, "@Amount", DbType.Decimal, payslipDet_Temp.Amount);
                db.AddInParameter(cmd, "@DEType", DbType.String, payslipDet_Temp.DEType);
                db.AddInParameter(cmd, "@IsStatutory", DbType.Boolean, payslipDet_Temp.IsStatutory);
                db.AddInParameter(cmd, "@ShowInPayslip", DbType.Boolean, payslipDet_Temp.ShowInPayslip);
                db.AddInParameter(cmd, "@YTD", DbType.Decimal, payslipDet_Temp.YTD);
                db.AddInParameter(cmd, "@Id", DbType.Int32, payslipDet_Temp.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the PayslipDet_Temp table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.PayslipDet_Temp " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the PayslipDet_Temp table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A PayslipDet_Temp object with data populated from the database.</returns>
        public PayslipDet_Temp SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [EmpNo], [EmployeeId], [EmpTxnId], [Period], [Year], [Description], [TaxTracking]" +
                        ", [Amount], [DEType], [IsStatutory], [ShowInPayslip], [YTD] " +
                "FROM dbo.PayslipDet_Temp  " +
                "WHERE [Id]=@Id ";

            PayslipDet_Temp payslipDet_Temp = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new PayslipDet_Temp
                        payslipDet_Temp = new PayslipDet_Temp();

                        // Read values.
                        payslipDet_Temp.Id = base.GetDataValue<int>(dr, "Id");
                        payslipDet_Temp.EmpNo = base.GetDataValue<string>(dr, "EmpNo");
                        payslipDet_Temp.EmployeeId = base.GetDataValue<int>(dr, "EmployeeId");
                        payslipDet_Temp.EmpTxnId = base.GetDataValue<int>(dr, "EmpTxnId");
                        payslipDet_Temp.Period = base.GetDataValue<int>(dr, "Period");
                        payslipDet_Temp.Year = base.GetDataValue<int>(dr, "Year");
                        payslipDet_Temp.Description = base.GetDataValue<string>(dr, "Description");
                        payslipDet_Temp.TaxTracking = base.GetDataValue<string>(dr, "TaxTracking");
                        payslipDet_Temp.Amount = base.GetDataValue<decimal>(dr, "Amount");
                        payslipDet_Temp.DEType = base.GetDataValue<string>(dr, "DEType");
                        payslipDet_Temp.IsStatutory = base.GetDataValue<bool>(dr, "IsStatutory");
                        payslipDet_Temp.ShowInPayslip = base.GetDataValue<bool>(dr, "ShowInPayslip");
                        payslipDet_Temp.YTD = base.GetDataValue<decimal>(dr, "YTD");
                    }
                }
            }

            return payslipDet_Temp;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the PayslipDet_Temp table.
        /// </summary>
        /// <returns>A collection of PayslipDet_Temp objects.</returns>		
        public List<PayslipDet_Temp> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [EmpNo], [EmployeeId], [EmpTxnId], [Period], [Year], [Description], [TaxTracking]" +
                        ", [Amount], [DEType], [IsStatutory], [ShowInPayslip], [YTD] " +
                "FROM dbo.PayslipDet_Temp ";

            List<PayslipDet_Temp> result = new List<PayslipDet_Temp>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new PayslipDet_Temp
                        PayslipDet_Temp payslipDet_Temp = new PayslipDet_Temp();

                        // Read values.
                        payslipDet_Temp.Id = base.GetDataValue<int>(dr, "Id");
                        payslipDet_Temp.EmpNo = base.GetDataValue<string>(dr, "EmpNo");
                        payslipDet_Temp.EmployeeId = base.GetDataValue<int>(dr, "EmployeeId");
                        payslipDet_Temp.EmpTxnId = base.GetDataValue<int>(dr, "EmpTxnId");
                        payslipDet_Temp.Period = base.GetDataValue<int>(dr, "Period");
                        payslipDet_Temp.Year = base.GetDataValue<int>(dr, "Year");
                        payslipDet_Temp.Description = base.GetDataValue<string>(dr, "Description");
                        payslipDet_Temp.TaxTracking = base.GetDataValue<string>(dr, "TaxTracking");
                        payslipDet_Temp.Amount = base.GetDataValue<decimal>(dr, "Amount");
                        payslipDet_Temp.DEType = base.GetDataValue<string>(dr, "DEType");
                        payslipDet_Temp.IsStatutory = base.GetDataValue<bool>(dr, "IsStatutory");
                        payslipDet_Temp.ShowInPayslip = base.GetDataValue<bool>(dr, "ShowInPayslip");
                        payslipDet_Temp.YTD = base.GetDataValue<decimal>(dr, "YTD");

                        // Add to List.
                        result.Add(payslipDet_Temp);
                    }
                }
            }

            return result;
        }
    }
}

