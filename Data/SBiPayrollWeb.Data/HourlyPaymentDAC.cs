//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:33:56 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiPayrollWeb.Entities;

namespace SBiPayrollWeb.Data
{
    /// <summary>
    /// HourlyPayment data access component. Manages CRUD operations for the HourlyPayment table.
    /// </summary>
    public partial class HourlyPaymentDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the HourlyPayment table.
        /// </summary>
        /// <param name="hourlyPayment">A HourlyPayment object.</param>
        /// <returns>An updated HourlyPayment object.</returns>
        public HourlyPayment Create(HourlyPayment hourlyPayment)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.HourlyPayment ([EmployeeId], [Empno], [WorkDate], [WorkHours], [RatePerHour]) " +
                "VALUES(@EmployeeId, @Empno, @WorkDate, @WorkHours, @RatePerHour);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@EmployeeId", DbType.Int32, hourlyPayment.EmployeeId);
                db.AddInParameter(cmd, "@Empno", DbType.StringFixedLength, hourlyPayment.Empno);
                db.AddInParameter(cmd, "@WorkDate", DbType.Date, hourlyPayment.WorkDate);
                db.AddInParameter(cmd, "@WorkHours", DbType.Int32, hourlyPayment.WorkHours);
                db.AddInParameter(cmd, "@RatePerHour", DbType.Currency, hourlyPayment.RatePerHour);

                db.ExecuteNonQuery(cmd);
            }

            return hourlyPayment;
        }

        /// <summary>
        /// Updates an existing row in the HourlyPayment table.
        /// </summary>
        /// <param name="hourlyPayment">A HourlyPayment entity object.</param>
        public void UpdateById(HourlyPayment hourlyPayment)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.HourlyPayment " +
                "SET " +
                    "[EmployeeId]=@EmployeeId, " +
                    "[WorkHours]=@WorkHours, " +
                    "[RatePerHour]=@RatePerHour " +
                "WHERE [Empno]=@Empno " +
                      "AND [WorkDate]=@WorkDate ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@EmployeeId", DbType.Int32, hourlyPayment.EmployeeId);
                db.AddInParameter(cmd, "@WorkHours", DbType.Int32, hourlyPayment.WorkHours);
                db.AddInParameter(cmd, "@RatePerHour", DbType.Currency, hourlyPayment.RatePerHour);
                db.AddInParameter(cmd, "@Empno", DbType.StringFixedLength, hourlyPayment.Empno);
                db.AddInParameter(cmd, "@WorkDate", DbType.Date, hourlyPayment.WorkDate);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the HourlyPayment table.
        /// </summary>
        /// <param name="empno">A empno value.</param>
        public void DeleteById(string empno)
        {
            const string SQL_STATEMENT = "DELETE dbo.HourlyPayment " +
                                         "WHERE [Empno]=@Empno ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Empno", DbType.StringFixedLength, empno);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the HourlyPayment table.
        /// </summary>
        /// <param name="empno">A Empno value.</param>
        /// <param name="workDate">A WorkDate value.</param>
        /// <returns>A HourlyPayment object with data populated from the database.</returns>
        public HourlyPayment SelectById(string empno, DateTime workDate)
        {
            const string SQL_STATEMENT =
                "SELECT [EmployeeId], [Empno], [WorkDate], [WorkHours], [RatePerHour] " +
                "FROM dbo.HourlyPayment  " +
                "WHERE [Empno]=@Empno " +
                      "AND [WorkDate]=@WorkDate ";

            HourlyPayment hourlyPayment = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Empno", DbType.StringFixedLength, empno);
                db.AddInParameter(cmd, "@WorkDate", DbType.Date, workDate);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new HourlyPayment
                        hourlyPayment = new HourlyPayment();

                        // Read values.
                        hourlyPayment.EmployeeId = base.GetDataValue<int>(dr, "EmployeeId");
                        hourlyPayment.Empno = base.GetDataValue<string>(dr, "Empno");
                        hourlyPayment.WorkDate = base.GetDataValue<DateTime>(dr, "WorkDate");
                        hourlyPayment.WorkHours = base.GetDataValue<int>(dr, "WorkHours");
                        hourlyPayment.RatePerHour = base.GetDataValue<decimal>(dr, "RatePerHour");
                    }
                }
            }

            return hourlyPayment;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the HourlyPayment table.
        /// </summary>
        /// <returns>A collection of HourlyPayment objects.</returns>		
        public List<HourlyPayment> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [EmployeeId], [Empno], [WorkDate], [WorkHours], [RatePerHour] " +
                "FROM dbo.HourlyPayment ";

            List<HourlyPayment> result = new List<HourlyPayment>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new HourlyPayment
                        HourlyPayment hourlyPayment = new HourlyPayment();

                        // Read values.
                        hourlyPayment.EmployeeId = base.GetDataValue<int>(dr, "EmployeeId");
                        hourlyPayment.Empno = base.GetDataValue<string>(dr, "Empno");
                        hourlyPayment.WorkDate = base.GetDataValue<DateTime>(dr, "WorkDate");
                        hourlyPayment.WorkHours = base.GetDataValue<int>(dr, "WorkHours");
                        hourlyPayment.RatePerHour = base.GetDataValue<decimal>(dr, "RatePerHour");

                        // Add to List.
                        result.Add(hourlyPayment);
                    }
                }
            }

            return result;
        }
    }
}

