//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:33:56 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiPayrollWeb.Entities;

namespace SBiPayrollWeb.Data
{
    /// <summary>
    /// Benefits data access component. Manages CRUD operations for the Benefits table.
    /// </summary>
    public partial class BenefitDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Benefits table.
        /// </summary>
        /// <param name="benefit">A Benefit object.</param>
        /// <returns>An updated Benefit object.</returns>
        public Benefit Create(Benefit benefit)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Benefits ([Description], [Rate], [IsDeleted]) " +
                "VALUES(@Description, @Rate, @IsDeleted); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Description", DbType.String, benefit.Description);
                db.AddInParameter(cmd, "@Rate", DbType.Currency, benefit.Rate);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, benefit.IsDeleted);

                // Get the primary key value.
                benefit.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return benefit;
        }

        /// <summary>
        /// Updates an existing row in the Benefits table.
        /// </summary>
        /// <param name="benefit">A Benefit entity object.</param>
        public void UpdateById(Benefit benefit)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Benefits " +
                "SET " +
                    "[Description]=@Description, " +
                    "[Rate]=@Rate, " +
                    "[IsDeleted]=@IsDeleted " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Description", DbType.String, benefit.Description);
                db.AddInParameter(cmd, "@Rate", DbType.Currency, benefit.Rate);
                db.AddInParameter(cmd, "@IsDeleted", DbType.Boolean, benefit.IsDeleted);
                db.AddInParameter(cmd, "@Id", DbType.Int32, benefit.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Benefits table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.Benefits " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Benefits table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A Benefit object with data populated from the database.</returns>
        public Benefit SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [Description], [Rate], [IsDeleted] " +
                "FROM dbo.Benefits  " +
                "WHERE [Id]=@Id ";

            Benefit benefit = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Benefit
                        benefit = new Benefit();

                        // Read values.
                        benefit.Id = base.GetDataValue<int>(dr, "Id");
                        benefit.Description = base.GetDataValue<string>(dr, "Description");
                        benefit.Rate = base.GetDataValue<decimal>(dr, "Rate");
                        benefit.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");
                    }
                }
            }

            return benefit;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Benefits table.
        /// </summary>
        /// <returns>A collection of Benefit objects.</returns>		
        public List<Benefit> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [Description], [Rate], [IsDeleted] " +
                "FROM dbo.Benefits ";

            List<Benefit> result = new List<Benefit>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Benefit
                        Benefit benefit = new Benefit();

                        // Read values.
                        benefit.Id = base.GetDataValue<int>(dr, "Id");
                        benefit.Description = base.GetDataValue<string>(dr, "Description");
                        benefit.Rate = base.GetDataValue<decimal>(dr, "Rate");
                        benefit.IsDeleted = base.GetDataValue<bool>(dr, "IsDeleted");

                        // Add to List.
                        result.Add(benefit);
                    }
                }
            }

            return result;
        }
    }
}

