//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:33:56 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiPayrollWeb.Entities;

namespace SBiPayrollWeb.Data
{
    /// <summary>
    /// Payrolls data access component. Manages CRUD operations for the Payrolls table.
    /// </summary>
    public partial class PayrollDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Payrolls table.
        /// </summary>
        /// <param name="payroll">A Payroll object.</param>
        /// <returns>An updated Payroll object.</returns>
        public Payroll Create(Payroll payroll)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Payrolls ([Period], [Year], [EmployerId], [DateRun], [RunBy], [Approved], [ApprovedBy], [IsOpen], [Processed]) " +
                "VALUES(@Period, @Year, @EmployerId, @DateRun, @RunBy, @Approved, @ApprovedBy, @IsOpen, @Processed);  ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Period", DbType.Int32, payroll.Period);
                db.AddInParameter(cmd, "@Year", DbType.Int32, payroll.Year);
                db.AddInParameter(cmd, "@EmployerId", DbType.Int32, payroll.EmployerId);
                db.AddInParameter(cmd, "@DateRun", DbType.DateTime, payroll.DateRun);
                db.AddInParameter(cmd, "@RunBy", DbType.String, payroll.RunBy);
                db.AddInParameter(cmd, "@Approved", DbType.Boolean, payroll.Approved);
                db.AddInParameter(cmd, "@ApprovedBy", DbType.String, payroll.ApprovedBy);
                db.AddInParameter(cmd, "@IsOpen", DbType.Boolean, payroll.IsOpen);
                db.AddInParameter(cmd, "@Processed", DbType.Boolean, payroll.Processed);

                db.ExecuteNonQuery(cmd);
            }

            return payroll;
        }

        /// <summary>
        /// Updates an existing row in the Payrolls table.
        /// </summary>
        /// <param name="payroll">A Payroll entity object.</param>
        public void UpdateById(Payroll payroll)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Payrolls " +
                "SET " +
                    "[EmployerId]=@EmployerId, " +
                    "[DateRun]=@DateRun, " +
                    "[RunBy]=@RunBy, " +
                    "[Approved]=@Approved, " +
                    "[ApprovedBy]=@ApprovedBy, " +
                    "[IsOpen]=@IsOpen, " +
                    "[Processed]=@Processed " +
                "WHERE [Period]=@Period " +
                      "AND [Year]=@Year ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@EmployerId", DbType.Int32, payroll.EmployerId);
                db.AddInParameter(cmd, "@DateRun", DbType.DateTime, payroll.DateRun);
                db.AddInParameter(cmd, "@RunBy", DbType.String, payroll.RunBy);
                db.AddInParameter(cmd, "@Approved", DbType.Boolean, payroll.Approved);
                db.AddInParameter(cmd, "@ApprovedBy", DbType.String, payroll.ApprovedBy);
                db.AddInParameter(cmd, "@IsOpen", DbType.Boolean, payroll.IsOpen);
                db.AddInParameter(cmd, "@Processed", DbType.Boolean, payroll.Processed);
                db.AddInParameter(cmd, "@Period", DbType.Int32, payroll.Period);
                db.AddInParameter(cmd, "@Year", DbType.Int32, payroll.Year);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the Payrolls table.
        /// </summary>
        /// <param name="period">A period value.</param>
        public void DeleteById(int period)
        {
            const string SQL_STATEMENT = "DELETE dbo.Payrolls " +
                                         "WHERE [Period]=@Period ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Period", DbType.Int32, period);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Payrolls table.
        /// </summary>
        /// <param name="period">A Period value.</param>
        /// <param name="year">A Year value.</param>
        /// <returns>A Payroll object with data populated from the database.</returns>
        public Payroll SelectById(int period, int year)
        {
            const string SQL_STATEMENT =
                "SELECT [Period], [Year], [EmployerId], [DateRun], [RunBy], [Approved], [ApprovedBy], [IsOpen]" +
                        ", [Processed] " +
                "FROM dbo.Payrolls  " +
                "WHERE [Period]=@Period " +
                      "AND [Year]=@Year ";

            Payroll payroll = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Period", DbType.Int32, period);
                db.AddInParameter(cmd, "@Year", DbType.Int32, year);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Payroll
                        payroll = new Payroll();

                        // Read values.
                        payroll.Period = base.GetDataValue<int>(dr, "Period");
                        payroll.Year = base.GetDataValue<int>(dr, "Year");
                        payroll.EmployerId = base.GetDataValue<int>(dr, "EmployerId");
                        payroll.DateRun = base.GetDataValue<DateTime>(dr, "DateRun");
                        payroll.RunBy = base.GetDataValue<string>(dr, "RunBy");
                        payroll.Approved = base.GetDataValue<bool>(dr, "Approved");
                        payroll.ApprovedBy = base.GetDataValue<string>(dr, "ApprovedBy");
                        payroll.IsOpen = base.GetDataValue<bool>(dr, "IsOpen");
                        payroll.Processed = base.GetDataValue<bool>(dr, "Processed");
                    }
                }
            }

            return payroll;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Payrolls table.
        /// </summary>
        /// <returns>A collection of Payroll objects.</returns>		
        public List<Payroll> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Period], [Year], [EmployerId], [DateRun], [RunBy], [Approved], [ApprovedBy], [IsOpen]" +
                        ", [Processed] " +
                "FROM dbo.Payrolls ";

            List<Payroll> result = new List<Payroll>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Payroll
                        Payroll payroll = new Payroll();

                        // Read values.
                        payroll.Period = base.GetDataValue<int>(dr, "Period");
                        payroll.Year = base.GetDataValue<int>(dr, "Year");
                        payroll.EmployerId = base.GetDataValue<int>(dr, "EmployerId");
                        payroll.DateRun = base.GetDataValue<DateTime>(dr, "DateRun");
                        payroll.RunBy = base.GetDataValue<string>(dr, "RunBy");
                        payroll.Approved = base.GetDataValue<bool>(dr, "Approved");
                        payroll.ApprovedBy = base.GetDataValue<string>(dr, "ApprovedBy");
                        payroll.IsOpen = base.GetDataValue<bool>(dr, "IsOpen");
                        payroll.Processed = base.GetDataValue<bool>(dr, "Processed");

                        // Add to List.
                        result.Add(payroll);
                    }
                }
            }

            return result;
        }
    }
}

