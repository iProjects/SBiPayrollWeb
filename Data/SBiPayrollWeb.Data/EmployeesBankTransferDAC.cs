//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 2.5.5049.15162)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by Administrator at SAPSERVER on 12/31/2014 17:33:56 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using SBiPayrollWeb.Entities;

namespace SBiPayrollWeb.Data
{
    /// <summary>
    /// EmployeesBankTransfers data access component. Manages CRUD operations for the EmployeesBankTransfers table.
    /// </summary>
    public partial class EmployeesBankTransferDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the EmployeesBankTransfers table.
        /// </summary>
        /// <param name="employeesBankTransfer">A EmployeesBankTransfer object.</param>
        /// <returns>An updated EmployeesBankTransfer object.</returns>
        public EmployeesBankTransfer Create(EmployeesBankTransfer employeesBankTransfer)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.EmployeesBankTransfers ([EmpNo], [BankSortCode], [EmployerBankId], [EmployerId], [EmployeeId]) " +
                "VALUES(@EmpNo, @BankSortCode, @EmployerBankId, @EmployerId, @EmployeeId); SELECT SCOPE_IDENTITY();";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@EmpNo", DbType.String, employeesBankTransfer.EmpNo);
                db.AddInParameter(cmd, "@BankSortCode", DbType.String, employeesBankTransfer.BankSortCode);
                db.AddInParameter(cmd, "@EmployerBankId", DbType.Int32, employeesBankTransfer.EmployerBankId);
                db.AddInParameter(cmd, "@EmployerId", DbType.Int32, employeesBankTransfer.EmployerId);
                db.AddInParameter(cmd, "@EmployeeId", DbType.Int32, employeesBankTransfer.EmployeeId);

                // Get the primary key value.
                employeesBankTransfer.Id = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return employeesBankTransfer;
        }

        /// <summary>
        /// Updates an existing row in the EmployeesBankTransfers table.
        /// </summary>
        /// <param name="employeesBankTransfer">A EmployeesBankTransfer entity object.</param>
        public void UpdateById(EmployeesBankTransfer employeesBankTransfer)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.EmployeesBankTransfers " +
                "SET " +
                    "[EmpNo]=@EmpNo, " +
                    "[BankSortCode]=@BankSortCode, " +
                    "[EmployerBankId]=@EmployerBankId, " +
                    "[EmployerId]=@EmployerId, " +
                    "[EmployeeId]=@EmployeeId " +
                "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@EmpNo", DbType.String, employeesBankTransfer.EmpNo);
                db.AddInParameter(cmd, "@BankSortCode", DbType.String, employeesBankTransfer.BankSortCode);
                db.AddInParameter(cmd, "@EmployerBankId", DbType.Int32, employeesBankTransfer.EmployerBankId);
                db.AddInParameter(cmd, "@EmployerId", DbType.Int32, employeesBankTransfer.EmployerId);
                db.AddInParameter(cmd, "@EmployeeId", DbType.Int32, employeesBankTransfer.EmployeeId);
                db.AddInParameter(cmd, "@Id", DbType.Int32, employeesBankTransfer.Id);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Conditionally deletes one or more rows in the EmployeesBankTransfers table.
        /// </summary>
        /// <param name="id">A id value.</param>
        public void DeleteById(int id)
        {
            const string SQL_STATEMENT = "DELETE dbo.EmployeesBankTransfers " +
                                         "WHERE [Id]=@Id ";

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);


                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the EmployeesBankTransfers table.
        /// </summary>
        /// <param name="id">A Id value.</param>
        /// <returns>A EmployeesBankTransfer object with data populated from the database.</returns>
        public EmployeesBankTransfer SelectById(int id)
        {
            const string SQL_STATEMENT =
                "SELECT [Id], [EmpNo], [BankSortCode], [EmployerBankId], [EmployerId], [EmployeeId] " +
                "FROM dbo.EmployeesBankTransfers  " +
                "WHERE [Id]=@Id ";

            EmployeesBankTransfer employeesBankTransfer = null;

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@Id", DbType.Int32, id);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new EmployeesBankTransfer
                        employeesBankTransfer = new EmployeesBankTransfer();

                        // Read values.
                        employeesBankTransfer.Id = base.GetDataValue<int>(dr, "Id");
                        employeesBankTransfer.EmpNo = base.GetDataValue<string>(dr, "EmpNo");
                        employeesBankTransfer.BankSortCode = base.GetDataValue<string>(dr, "BankSortCode");
                        employeesBankTransfer.EmployerBankId = base.GetDataValue<int>(dr, "EmployerBankId");
                        employeesBankTransfer.EmployerId = base.GetDataValue<int>(dr, "EmployerId");
                        employeesBankTransfer.EmployeeId = base.GetDataValue<int>(dr, "EmployeeId");
                    }
                }
            }

            return employeesBankTransfer;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the EmployeesBankTransfers table.
        /// </summary>
        /// <returns>A collection of EmployeesBankTransfer objects.</returns>		
        public List<EmployeesBankTransfer> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [Id], [EmpNo], [BankSortCode], [EmployerBankId], [EmployerId], [EmployeeId] " +
                "FROM dbo.EmployeesBankTransfers ";

            List<EmployeesBankTransfer> result = new List<EmployeesBankTransfer>();

            // Connect to database.
            Database db = DatabaseFactory.CreateDatabase(CONNECTION_NAME);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new EmployeesBankTransfer
                        EmployeesBankTransfer employeesBankTransfer = new EmployeesBankTransfer();

                        // Read values.
                        employeesBankTransfer.Id = base.GetDataValue<int>(dr, "Id");
                        employeesBankTransfer.EmpNo = base.GetDataValue<string>(dr, "EmpNo");
                        employeesBankTransfer.BankSortCode = base.GetDataValue<string>(dr, "BankSortCode");
                        employeesBankTransfer.EmployerBankId = base.GetDataValue<int>(dr, "EmployerBankId");
                        employeesBankTransfer.EmployerId = base.GetDataValue<int>(dr, "EmployerId");
                        employeesBankTransfer.EmployeeId = base.GetDataValue<int>(dr, "EmployeeId");

                        // Add to List.
                        result.Add(employeesBankTransfer);
                    }
                }
            }

            return result;
        }
    }
}

